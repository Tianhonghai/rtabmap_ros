
<launch>
  <!-- 
       Bringup Turtlebot:
       $ roslaunch turtlebot_bringup minimal.launch
       
       Mapping:
       $ roslaunch rtabmap_ros demo_turtlebot_mapping.launch
       
       Visualization:
       $ roslaunch rtabmap_ros demo_turtlebot_rviz.launch
       
       This launch file is a one to one replacement of the gmapping_demo.launch in the 
       "SLAM Map Building with TurtleBot" tutorial:
       http://wiki.ros.org/turtlebot_navigation/Tutorials/indigo/Build%20a%20map%20with%20SLAM
       
       For localization-only after a mapping session, add argument "localization:=true" to
       demo_turtlebot_mapping.launch line above. Move the robot around until it can relocalize in 
       the previous map, then the 2D map should re-appear again. You can then follow the same steps 
       from 3.3.2 of the "Autonomous Navigation of a Known Map with TurtleBot" tutorial:
       http://wiki.ros.org/turtlebot_navigation/Tutorials/Autonomously%20navigate%20in%20a%20known%20map
 
       For turtlebot in simulation (Gazebo):
         $ roslaunch turtlebot_gazebo turtlebot_world.launch
         $ roslaunch rtabmap_ros demo_turtlebot_mapping.launch simulation:=true
         $ roslaunch rtabmap_ros demo_turtlebot_rviz.launch
  -->
  
  <arg name="database_path"     default="rtabmap.db"/>
  <arg name="rgbd_odometry"     default="false"/>
  <arg name="rtabmapviz"        default="false"/>
  <arg name="localization"      default="true"/>
  <arg name="simulation"        default="false"/>
  <arg name="sw_registered"     default="false"/>
  <arg     if="$(arg localization)" name="args"  default=""/>
  <arg unless="$(arg localization)" name="args"  default="--delete_db_on_start"/>

  <arg     if="$(arg simulation)" name="rgb_topic"   default="/camera/color/image_raw"/>
  <arg unless="$(arg simulation)" name="rgb_topic"   default="/camera/color/image_raw"/>
  <arg     if="$(arg simulation)" name="depth_topic" default="/camera/depth/image_raw"/>
  <arg unless="$(arg simulation)" name="depth_topic" default="/camera/aligned_depth_to_color/image_raw"/>
  <!-- <arg unless="$(arg simulation)" name="depth_topic" default="/camera/depth/image_rect_raw"/> -->
  <arg name="camera_info_topic" default="/camera/color/camera_info"/>
  
  <arg name="wait_for_transform"  default="0.2"/> 
  
  <!-- Navigation stuff (move_base) -->
  <!-- <include file="$(find rtabmap_ros)/launch/demo/kobuki_navigation.launch"/> -->

  <!-- Mapping -->
  <group ns="rtabmap">

    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg args)">

	  <param name="database_path"       type="string" value="$(arg database_path)"/>
	  <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
    <remap from="move_base"            to="/move_base"/>
	  <!-- inputs -->
	  <remap from="scan"            to="/scan"/>
	  <remap from="rgb/image"       to="$(arg rgb_topic)"/>
    <remap from="depth/image"     to="$(arg depth_topic)"/>
    <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>

    <!-- Fix odom covariance as in simulation the covariance in /odom topic is high (0.1 for linear and 0.05 for angular) -->
    <param unless="$(arg rgbd_odometry)" name="odom_frame_id" value="odom"/>
    <param unless="$(arg rgbd_odometry)" name="odom_tf_linear_variance" value="0.001"/>
    <param unless="$(arg rgbd_odometry)" name="odom_tf_angular_variance" value="0.001"/>
  	  
    <!-- output -->
    <remap from="grid_map" to="/map"/>
    
    <!-- main params -->
	  <param name="map_always_update"   type="bool" value="false"/>

	  <param name="frame_id"            type="string" value="base_footprint"/>
	  <param name="odom_frame_id"       type="string" value="odom"/>
	  <param name="map_frame_id"        type="string" value="map"/>
	  <param name="use_action_for_goal" type="bool"   value="true"/>

	

	
	  <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
	  <param name="Grid/FromDepth"               type="string" value="false"/> <!-- Create 2D occupancy grid from laser scan -->
	  <param name="Icp/CorrespondenceRatio"      type="string" value="0.4"/>
    <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
	  <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
	  <param name="Mem/InitWMWithAllNodes"       type="string" value="false"/> 
	  <param name="Mem/STMSize"                  type="string" value="30"/>    <!-- increased to 30 to avoid adding too many loop closures on just seen locations -->
	  <param name="RGBD/LocalRadius"             type="string" value="5"/>     <!-- limit length of proximity detections -->
	  <param name="RGBD/NeighborLinkRefining"    type="string" value="true"/>  <!-- Do odometry correction with consecutive laser scans -->
	  <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="false"/>  <!-- Set to false to generate map correction between /map and /odom -->
	  <param name="RGBD/OptimizeMaxError"        type="string" value="3"/>	    <!-- Reject any loop closure causing large errors (>3x link's covariance) in the map -->
    <param name="RGBD/ProximityBySpace"        type="string" value="true"/>   <!-- Local loop closure detection (using estimated position) with locations in WM -->
	  <param name="RGBD/ProximityByTime"         type="string" value="false"/> <!-- Local loop closure detection with locations in STM -->
	  <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="10"/> 
	  <param name="Reg/Force3DoF"                type="string" value="true"/>
	  <param name="Reg/Strategy"                 type="string" value="1"/>      <!-- Loop closure transformation: 0=Visual, 1=ICP, 2=Visual+ICP -->
	  <param name="Vis/MinInliers"               type="string" value="12"/>      <!-- 3D visual words minimum inliers to accept loop closure -->
    <param name="Icp/CorrespondenceRatio"      type="string" value="0.2"/>
    
	  <param name="subscribe_depth"     type="bool"   value="true"/>
	  <param name="subscribe_scan"      type="bool"   value="true"/>

    </node>
   
    <!-- Odometry : ONLY for testing without the actual robot! /odom TF should not be already published. -->
    <node if="$(arg rgbd_odometry)" pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
      <param name="frame_id"                    type="string" value="base_footprint"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <param name="Reg/Force3DoF"               type="string" value="true"/>
      <param name="Vis/InlierDistance"          type="string" value="0.05"/>
      
      <remap from="rgb/image"       to="$(arg rgb_topic)"/>
      <remap from="depth/image"     to="$(arg depth_topic)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
    </node>
    
    <!-- visualization with rtabmapviz -->
    <!--<node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
  	  <param name="subscribe_depth"             type="bool" value="true"/>
      <param name="subscribe_scan"              type="bool" value="true"/>
      <param name="frame_id"                    type="string" value="base_footprint"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
    
      <remap from="rgb/image"       to="$(arg rgb_topic)"/>
      <remap from="depth/image"     to="$(arg depth_topic)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
      <remap from="scan"            to="/scan"/>
    </node>-->
    
  </group>
</launch>
